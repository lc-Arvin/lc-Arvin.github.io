---
layout: post
title:  "01 性能优化是个系统性工程"
date:   2021-09-19 14:00:00 +0800
categories: docs
---

相信每一个程序员都有做过一些性能优化相关的工作。上层的网站页面响应速度，视频加载的帧率，下层的多线程编程向量处理优化等等，都可以加上性能优化的标签。从我个人的视角看，性能优化应当被视为一个系统性工程，有体系地开展工作。

怎么理解？

### 软件系统经常是一个分层多组件的系统，端到端性能需要多组件协同

假设我们在应用层工作（再往上就是不需要理解编程世界的用户了），从我们的系统看下去，往往能看到好几层组件，包括应用层软件，如网页入口/APP等；基础软件，如数据库/中间件/开发框架等；操作系统，如Linux等；硬件, 如CPU/GPU/加速卡等。各层协作，才使得我们的系统正常向用户提供服务。

<figure>
    <div align=center>
    <img src="{{site.url}}/images/2021-09-19-hp01.png" weight=200 height=300 />
    </div>
</figure>

各层也都有自己的性能衡量。对于系统而言，端到端的性能最佳往往能够带来最大的收益，也是性能优化的最终目的。端到端的性能，是各个组件性能协同的结果。木桶理论也许可以在这里体现：性能最差的组件，决定端到端性能的上限。只有每一层做到足够好，端到端的性能的上限才能足够高。各层的专家往往在自己这一层有很多专业的贡献，将自己的组件性能做到了极致。在解决具体的端到端性能优化时，应当考虑借鉴各层的最佳方案，做最优组合。

但在给定的组件下，端到端的最佳性不一定是各个组件各自最优性能的组合，而是整体配合下达到端到端的最佳性能，也就是全局最优和局部最优的关系。这个场景在消息队列方的使用中都有体现。生产者、消费者、队列本身的性能配合到极致，才能实现最优全局性能。如果生产者性能过高导致消息大量涌入而消费者性能不足，则可能导致消息大量积压甚至丢弃。

### 基本的三板斧：测量，优化，再测量

性能优化工作的大框架基本是一致的：测量，优化，再测量。在工作开始时，得到一版基准数据是必须的，这为后续的数据衡量提供基准，也为优化工作识别瓶颈，指导优化工作朝着具体的目标开展。优化工作因优化对象的不同，但优化后的结果依然是基于同样的环境做测量，与基准数据做对比来确定。

<figure>
    <div align=center>
    <img src="{{site.url}}/images/2021-09-19-hp02.png" weight=200 height=300 />
    </div>
</figure>

### 方法与工具

有很多方法与工具帮助我们进行实际的测量及优化工作。
测量方面，日志是第一个工具。然后是各种Profiling工具, 比如Linux平台perf、Windows平台的WPA等。
优化方面，针对不同组件有各种各样不同方法与工具。比如CPU可能提供SIMD等特殊指令集，加速计算；操作系统提供亲和性能力释放NUMA架构的最大性能；中间件利用多进程多线程进行并发处理；应用层利用缓存等方法来加速访问。

### 系统性能需要看护

系统性可以持续看护起来。在某个阶段，我们经过大量工作突破了某项性能指标；如果经过几个迭代，指标又莫名奇妙的降下来，那就太痛苦了。
一次性能优化工作后，性能的测量方法、优化过程都是很有价值的经验。可以考虑将性能指标加到项目看护流程中，比如代码流水线的门禁中，持续监控。这样，性能优化才能避免像打地鼠一样，哪里冒起来搞哪里，而是向着最佳性能不断收敛，逐步向全局最优的方向去。

### 总结

性能优化可以系统化的开展。了解优化对象的系统组成，能够帮助我们全面地分析问题；基于测量的结果进行优化，能够帮助我们有的放矢，关注真正的瓶颈；有许多的方法与工具支撑性能优化工作。对于项目而言，性能监控可以纳入工程建设中，让性能优化工作向着最佳性能不断收敛。
